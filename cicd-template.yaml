apiVersion: v1
groupNames: null
kind: RoleBinding
metadata:
  name: default_admin
roleRef:
  name: admin
subjects:
  - kind: ServiceAccount
    name: default


---


apiVersion: batch/v1
kind: Job
metadata:
  name: cicd-demo-installer
spec:
  activeDeadlineSeconds: 400
  completions: 1
  parallelism: 1
  template:
    spec:
      containers:
      - env:
        - name: CICD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        command:
        - /bin/bash
        - -x
        - -c
        - |           
          # adjust jenkins 
          oc set resources dc/jenkins --limits=cpu=2,memory=2Gi --requests=cpu=100m,memory=512Mi 
          oc label dc jenkins app=jenkins --overwrite 

          # setup dev env
          oc import-image wildfly --from=openshift/wildfly-120-centos7 --confirm -n ${DEV_PROJECT} 
          
          if [ "${ENABLE_QUAY}" == "true" ] ; then
            # cicd
            oc create secret generic quay-cicd-secret --from-literal="username=${QUAY_USERNAME}" --from-literal="password=${QUAY_PASSWORD}" -n ${CICD_NAMESPACE}
            oc label secret quay-cicd-secret credential.sync.jenkins.openshift.io=true -n ${CICD_NAMESPACE}
            
            # dev
            oc create secret docker-registry quay-cicd-secret --docker-server=quay.io --docker-username="${QUAY_USERNAME}" --docker-password="${QUAY_PASSWORD}" --docker-email=cicd@redhat.com -n ${DEV_PROJECT}
            oc new-build --name=tasks --image-stream=wildfly:latest --binary=true --push-secret=quay-cicd-secret --to-docker --to='quay.io/${QUAY_USERNAME}/${QUAY_REPOSITORY}:latest' -n ${DEV_PROJECT}
            oc new-app --name=tasks --docker-image=quay.io/${QUAY_USERNAME}/${QUAY_REPOSITORY}:latest --allow-missing-images -n ${DEV_PROJECT}
            oc set triggers dc tasks --remove-all -n ${DEV_PROJECT}
            oc patch dc tasks -p '{"spec": {"template": {"spec": {"containers": [{"name": "tasks", "imagePullPolicy": "Always"}]}}}}' -n ${DEV_PROJECT}
            oc delete is tasks -n ${DEV_PROJECT}
            oc secrets link default quay-cicd-secret --for=pull -n ${DEV_PROJECT}
            
            # stage
            oc create secret docker-registry quay-cicd-secret --docker-server=quay.io --docker-username="${QUAY_USERNAME}" --docker-password="${QUAY_PASSWORD}" --docker-email=cicd@redhat.com -n ${STAGE_PROJECT}
            oc new-app --name=tasks --docker-image=quay.io/${QUAY_USERNAME}/${QUAY_REPOSITORY}:stage --allow-missing-images -n ${STAGE_PROJECT}
            oc set triggers dc tasks --remove-all -n ${STAGE_PROJECT}
            oc patch dc tasks -p '{"spec": {"template": {"spec": {"containers": [{"name": "tasks", "imagePullPolicy": "Always"}]}}}}' -n ${STAGE_PROJECT}
            oc delete is tasks -n ${STAGE_PROJECT}
            oc secrets link default quay-cicd-secret --for=pull -n ${STAGE_PROJECT}
          else
            # dev
            oc new-build --name=tasks --image-stream=wildfly:latest --binary=true -n ${DEV_PROJECT}
            oc new-app tasks:latest --allow-missing-images -n ${DEV_PROJECT}
            oc set triggers dc -l app=tasks --containers=tasks --from-image=tasks:latest --manual -n ${DEV_PROJECT}
            
            # stage
            oc new-app tasks:stage --allow-missing-images -n ${STAGE_PROJECT}
            oc set triggers dc -l app=tasks --containers=tasks --from-image=tasks:stage --manual -n ${STAGE_PROJECT}
          fi
          
          # dev project
          oc expose dc/tasks --port=8080 -n ${DEV_PROJECT}
          oc expose svc/tasks -n ${DEV_PROJECT}
          oc set probe dc/tasks --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10 -n ${DEV_PROJECT}
          oc set probe dc/tasks --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 -n ${DEV_PROJECT}
          oc rollout cancel dc/tasks -n ${STAGE_PROJECT}

          # stage project
          oc expose dc/tasks --port=8080 -n ${STAGE_PROJECT}
          oc expose svc/tasks -n ${STAGE_PROJECT}
          oc set probe dc/tasks --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10 -n ${STAGE_PROJECT}
          oc set probe dc/tasks --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 -n ${STAGE_PROJECT}
          oc rollout cancel dc/tasks -n ${DEV_PROJECT}

          # deploy gogs
          HOSTNAME=$(oc get route jenkins -o template --template='{{.spec.host}}' | sed "s/jenkins-${CICD_NAMESPACE}.//g")
          GOGS_HOSTNAME="gogs-$CICD_NAMESPACE.$HOSTNAME"

          if [ "${EPHEMERAL}" == "true" ] ; then
          curl -s https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml|sed 's#sql\:9.5#sql\:9.6#g'| oc new-app -f - \
                --param=GOGS_VERSION=0.11.34 \
                --param=HOSTNAME=$GOGS_HOSTNAME \
                --param=SKIP_TLS_VERIFY=true
          else
          curl -s https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-persistent-template.yaml |sed 's#sql\:9.5#sql\:9.6#g'| oc new-app -f - \
                --param=GOGS_VERSION=0.11.34 \
                --param=HOSTNAME=$GOGS_HOSTNAME \
                --param=SKIP_TLS_VERIFY=true
          fi
          
          sleep 5

          if [ "${EPHEMERAL}" == "true" ] ; then
            oc new-app -f https://raw.githubusercontent.com/siamaksade/sonarqube/master/sonarqube-template.yml --param=SONARQUBE_MEMORY_LIMIT=6Gi
          else
            oc new-app -f https://raw.githubusercontent.com/siamaksade/sonarqube/master/sonarqube-persistent-template.yml --param=SONARQUBE_MEMORY_LIMIT=6Gi
          fi

          if [ "${DEPLOY_CHE}" == "true" ] ; then
            oc process -f https://raw.githubusercontent.com/minishift/minishift/master/addons/che/templates/che-workspace-service-account.yaml \
                --param SERVICE_ACCOUNT_NAMESPACE=$CICD_NAMESPACE --param=SERVICE_ACCOUNT_NAME=che-workspace | oc create -f -

            oc process -f https://raw.githubusercontent.com/minishift/minishift/master/addons/che/templates/che-server-template.yaml \
              --param ROUTING_SUFFIX=$HOSTNAME \
              --param CHE_MULTIUSER=false \
              --param CHE_VERSION="6.19.0" \
              --param CHE_INFRA_OPENSHIFT_PROJECT=$CICD_NAMESPACE \
              --param CHE_INFRA_KUBERNETES_SERVICE__ACCOUNT__NAME=che-workspace | oc create -f -

            oc set resources dc/che --limits=cpu=1,memory=2Gi --requests=cpu=200m,memory=512Mi
          fi

          if [ "${EPHEMERAL}" == "true" ] ; then
            oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-template.yaml --param=NEXUS_VERSION=3.13.0 --param=MAX_MEMORY=2Gi
          else
            oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-persistent-template.yaml --param=NEXUS_VERSION=3.13.0 --param=MAX_MEMORY=2Gi
          fi

          oc set resources dc/nexus --requests=cpu=200m,memory=1Gi --limits=cpu=2,memory=4Gi 

          GOGS_SVC=$(oc get svc gogs -o template --template='{{.spec.clusterIP}}')
          GOGS_USER=gogs
          GOGS_PWD=gogs

          oc rollout status dc gogs

          _RETURN=$(curl -o /tmp/curl.log -sL --post302 -w "%{http_code}" http://$GOGS_SVC:3000/user/sign_up \
            --form user_name=$GOGS_USER \
            --form password=$GOGS_PWD \
            --form retype=$GOGS_PWD \
            --form email=admin@gogs.com)

          sleep 5

          if [ $_RETURN != "200" ] && [ $_RETURN != "302" ] ; then
            echo "ERROR: Failed to create Gogs admin"
            cat /tmp/curl.log
            exit 255
          fi

          sleep 10

          cat <<EOF > /tmp/data.json
          {
            "clone_addr": "https://github.com/OpenShiftDemos/openshift-tasks.git",
            "uid": 1,
            "repo_name": "openshift-tasks"
          }
          EOF

          _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
          -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/migrate -d @/tmp/data.json)

          if [ $_RETURN != "201" ] ;then
            echo "ERROR: Failed to import openshift-tasks GitHub repo"
            cat /tmp/curl.log
            exit 255
          fi

          sleep 5

          cat <<EOF > /tmp/data.json
          {
            "type": "gogs",
            "config": {
              "url": "https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$CICD_NAMESPACE/buildconfigs/tasks-pipeline/webhooks/${WEBHOOK_SECRET}/generic",
              "content_type": "json"
            },
            "events": [
              "push"
            ],
            "active": true
          }
          EOF

          _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
          -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/gogs/openshift-tasks/hooks -d @/tmp/data.json)

          if [ $_RETURN != "201" ] ; then
            echo "ERROR: Failed to set webhook"
            cat /tmp/curl.log
            exit 255
          fi
        image: openshift/origin:v3.11
        name: cicd-demo-installer-job
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      restartPolicy: Never

