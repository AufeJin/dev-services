apiVersion: v1
kind: ServiceAccount
metadata:
    name: cicd_installer

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
groupNames: null
metadata:
  name: cicd_installer_admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
  - kind: ServiceAccount
    name: cicd_installer

---


apiVersion: batch/v1
kind: Job
metadata:
  name: cicd-demo-installer
spec:
  activeDeadlineSeconds: 400
  completions: 1
  parallelism: 1
  template:
    spec:
      serviceAccountName: cicd_installer
      restartPolicy: Never
      containers:
        - name: cicd-installer-job
          image: openshift/origin:v3.11
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          env:
            - name: CICD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - /bin/bash
            - -x
            - -c
            - |

              # setup dev env
              oc import-image wildfly --from=openshift/wildfly-120-centos7 --confirm -n ${DEV_PROJECT} 

              # setup image registry
              # cicd
              oc create secret generic quay-cicd-secret --from-literal="username=${QUAY_USERNAME}" --from-literal="password=${QUAY_PASSWORD}" -n ${CICD_NAMESPACE}
              oc label secret quay-cicd-secret credential.sync.jenkins.openshift.io=true -n ${CICD_NAMESPACE}
              
              # dev
              oc create secret docker-registry quay-cicd-secret --docker-server=quay.io --docker-username="${QUAY_USERNAME}" --docker-password="${QUAY_PASSWORD}" --docker-email=cicd@redhat.com -n ${DEV_PROJECT}
              oc new-build --name=tasks --image-stream=wildfly:latest --binary=true --push-secret=quay-cicd-secret --to-docker --to='quay.io/${QUAY_USERNAME}/${QUAY_REPOSITORY}:latest' -n ${DEV_PROJECT}
              oc new-app --name=tasks --docker-image=quay.io/${QUAY_USERNAME}/${QUAY_REPOSITORY}:latest --allow-missing-images -n ${DEV_PROJECT}
              oc set triggers dc tasks --remove-all -n ${DEV_PROJECT}
              oc patch dc tasks -p '{"spec": {"template": {"spec": {"containers": [{"name": "tasks", "imagePullPolicy": "Always"}]}}}}' -n ${DEV_PROJECT}
              oc delete is tasks -n ${DEV_PROJECT}
              oc secrets link default quay-cicd-secret --for=pull -n ${DEV_PROJECT}
              
              # stage
              oc create secret docker-registry quay-cicd-secret --docker-server=quay.io --docker-username="${QUAY_USERNAME}" --docker-password="${QUAY_PASSWORD}" --docker-email=cicd@redhat.com -n ${STAGE_PROJECT}
              oc new-app --name=tasks --docker-image=quay.io/${QUAY_USERNAME}/${QUAY_REPOSITORY}:stage --allow-missing-images -n ${STAGE_PROJECT}
              oc set triggers dc tasks --remove-all -n ${STAGE_PROJECT}
              oc patch dc tasks -p '{"spec": {"template": {"spec": {"containers": [{"name": "tasks", "imagePullPolicy": "Always"}]}}}}' -n ${STAGE_PROJECT}
              oc delete is tasks -n ${STAGE_PROJECT}
              oc secrets link default quay-cicd-secret --for=pull -n ${STAGE_PROJECT}

              
              # dev project
              oc expose dc/tasks --port=8080 -n ${DEV_PROJECT}
              oc expose svc/tasks -n ${DEV_PROJECT}
              oc set probe dc/tasks --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10 -n ${DEV_PROJECT}
              oc set probe dc/tasks --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 -n ${DEV_PROJECT}
              oc rollout cancel dc/tasks -n ${STAGE_PROJECT}

              # stage project
              oc expose dc/tasks --port=8080 -n ${STAGE_PROJECT}
              oc expose svc/tasks -n ${STAGE_PROJECT}
              oc set probe dc/tasks --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10 -n ${STAGE_PROJECT}
              oc set probe dc/tasks --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 -n ${STAGE_PROJECT}
              oc rollout cancel dc/tasks -n ${DEV_PROJECT}

              
              oc new-app -f https://raw.githubusercontent.com/siamaksade/sonarqube/master/sonarqube-template.yml --param=SONARQUBE_MEMORY_LIMIT=6Gi
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-template.yaml --param=NEXUS_VERSION=3.13.0 --param=MAX_MEMORY=2Gi          
              oc set resources dc/nexus --requests=cpu=200m,memory=1Gi --limits=cpu=2,memory=4Gi 




              GOGS_SVC=$(kubectl get svc gogs -o template --template='{{.spec.clusterIP}}')
              GOGS_USER=gogs
              GOGS_PWD=gogs

              kubectl rollout status dc gogs

              _RETURN=$(curl -o /tmp/curl.log -sL --post302 -w "%{http_code}" http://$GOGS_SVC:3000/user/sign_up \
                --form user_name=$GOGS_USER \
                --form password=$GOGS_PWD \
                --form retype=$GOGS_PWD \
                --form email=admin@gogs.com)

              sleep 5

              if [ $_RETURN != "200" ] && [ $_RETURN != "302" ] ; then
                echo "ERROR: Failed to create Gogs admin"
                cat /tmp/curl.log
                exit 255
              fi

              sleep 10

              cat <<EOF > /tmp/data.json
              {
                "clone_addr": "https://github.com/OpenShiftDemos/openshift-tasks.git",
                "uid": 1,
                "repo_name": "openshift-tasks"
              }
              EOF

              _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
              -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/migrate -d @/tmp/data.json)

              if [ $_RETURN != "201" ] ;then
                echo "ERROR: Failed to import openshift-tasks GitHub repo"
                cat /tmp/curl.log
                exit 255
              fi

              sleep 5

              cat <<EOF > /tmp/data.json
              {
                "type": "gogs",
                "config": {
                  "url": "http://jenkins.${CICD_NAMESPACE}.svc.cluster.local/job/openshift-tasks/build?token=AMRAAIPvxjPpotgUZsyG",
                  "content_type": "json"
                },
                "events": [
                  "push"
                ],
                "active": true
              }
              EOF

              _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
              -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/gogs/openshift-tasks/hooks -d @/tmp/data.json)

              if [ $_RETURN != "201" ] ; then
                echo "ERROR: Failed to set webhook"
                cat /tmp/curl.log
                exit 255
              fi

